"""
Haber Başlıkları için Topic Modeling Analizi
- LDA ve NMF modellerinin karşılaştırması
- Performans metrikleri ve görselleştirmeler
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.decomposition import LatentDirichletAllocation, NMF
from gensim.models import CoherenceModel
from gensim.corpora import Dictionary

# 1. VERİ YÜKLEME
print(" Veri yükleniyor...")
df = pd.read_csv("temizlenmis_haberler_tumu.csv")  # doğru dosya adını yazdım
texts = df['clean_text'].astype(str).tolist()
tokenized_texts = [text.split() for text in texts]

# 2.1. COUNT VEKTÖRLEŞTİRME (BoW)
print(" CountVectorizer (BoW) ile vektörleştiriliyor...")
count_vectorizer = CountVectorizer(max_df=0.95, min_df=2, stop_words='english')
X_bow = count_vectorizer.fit_transform(texts)

# 3.1. LDA (BoW ile)
print(" LDA (BoW) ile eğitiliyor...")
lda_bow = LatentDirichletAllocation(n_components=5, random_state=42)
lda_bow.fit(X_bow)

# 4.1. TOPIC İSİMLENDİRME VE YORUM
# Anahtar kelimelere göre topic isimleri (örnek, çıktıdan sonra elle güncellenebilir)
topic_names = {
    0: "Ekonomi",
    1: "Spor",
    2: "Siyaset",
    3: "Teknoloji",
    4: "Magazin"
}

def print_topics_with_names(model, feature_names, n_top_words=10, topic_names=None):
    for topic_idx, topic in enumerate(model.components_):
        topic_words = [feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]
        name = topic_names[topic_idx] if topic_names and topic_idx in topic_names else f"Topic {topic_idx+1}"
        print(f"\n {name}:")
        print(" ", " ".join(topic_words))
        if topic_names:
            print(f" Açıklama: {name} ile ilgili başlıklar.")

print("\n LDA (BoW) Konuları ve Açıklamaları:")
print_topics_with_names(lda_bow, count_vectorizer.get_feature_names_out(), topic_names=topic_names)

# 5.1. LDA (BoW) için coherence
print("\n LDA (BoW) için coherence hesaplanıyor...")
def calculate_coherence_bow(model, feature_names):
    topics = []
    for topic in model.components_:
        topics.append([feature_names[i] for i in topic.argsort()[:-10 - 1:-1]])
    cm = CoherenceModel(topics=topics, texts=tokenized_texts, 
                        dictionary=dictionary, coherence='c_v')
    return cm.get_coherence()
lda_bow_coherence = calculate_coherence_bow(lda_bow, count_vectorizer.get_feature_names_out())
print(f" LDA (BoW) Coherence: {lda_bow_coherence:.3f}")

# 6.1. LDA (BoW) görselleştirme
plt.figure(figsize=(18, 6))
plt.subplot(1, 3, 1)
plt.hist(np.argmax(lda_bow.transform(X_bow), axis=1), bins=5)
plt.title("LDA (BoW) Konu Dağılımı")
plt.subplot(1, 3, 2)
plt.hist(np.argmax(lda.transform(X_tfidf), axis=1), bins=5)
plt.title("LDA (TF-IDF) Konu Dağılımı")
plt.subplot(1, 3, 3)
plt.hist(np.argmax(nmf.transform(X_tfidf), axis=1), bins=5)
plt.title("NMF (TF-IDF) Konu Dağılımı")
plt.tight_layout()
plt.savefig('topic_distributions_all.png')
plt.close()

# 7.1. Sonuçları kaydetme (güncel)
print("\n Sonuçlar kaydediliyor...")
results = pd.DataFrame({
    'Model': ['LDA (BoW)', 'LDA (TF-IDF)', 'NMF (TF-IDF)'],
    'Coherence': [lda_bow_coherence, lda_coherence, nmf_coherence],
    'Description': [
        'BoW ile klasik LDA, genellikle daha anlamlı topicler',
        'TF-IDF ile LDA, bazı durumlarda topic ayrımını zorlaştırabilir. ',
        'NMF, daha spesifik ve ayrışmış topicler'
    ]
})
results.to_csv('topic_modeling_results.csv', index=False)

# 8. Yöntemlerin avantaj/dezavantajları ve gözlem
print("""
 TAMAMLANDI

- 'topic_distributions_all.png': 3 modelin konu dağılım grafikleri
- 'topic_modeling_results.csv': Model kıyaslama sonuçları

Yöntem Karşılaştırması:
- LDA (BoW): Klasik yöntem, genellikle daha anlamlı ve tutarlı topicler üretir.
- LDA (TF-IDF): TF-IDF ile LDA, bazı durumlarda topic ayrımını zorlaştırabilir.
- NMF (TF-IDF): Spesifik ve ayrışmış topicler, ancak bazen anlam bütünlüğü düşük olabilir.

Topic isimleri ve açıklamaları, anahtar kelimelere bakılarak elle güncellenebilir.
""")
